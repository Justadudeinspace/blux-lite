# blux/tui_starship.py — minimal, runnable “starship” TUI
from textual.app import App, ComposeResult
from textual.containers import Horizontal, Vertical, Grid, Container
from textual.widgets import Header, Footer, Static, ListItem, ListView

CSS_PATH = "blux/tui_starship.tcss"

PLUGINS = [
    {"name": "Genkit", "ver": "0.5.1", "on": True,  "desc": "AI framework integration"},
    {"name": "Code Quality", "ver": "1.2.0", "on": True,  "desc": "Linting & formatting"},
    {"name": "Heimdall Tools", "ver": "0.8.3", "on": False, "desc": "Samsung download-mode ops"},
    {"name": "Payload Tools", "ver": "0.9.0", "on": True,  "desc": "Payload builders (update avail)"},
    {"name": "APK Retool", "ver": "1.0.5", "on": False, "desc": "Decompilation & analysis"},
]

class Banner(Static):
    def on_mount(self) -> None:
        self.update("[b][cyan]BLUX Lite GOLD[/] — [magenta]Starship Ops Console[/][/b]")
        self.add_class("glowing-text")

class StatusPanel(Static):
    def on_mount(self) -> None:
        self.update(
            "[dim]SYSTEM STATUS[/dim]\n"
            "CPU: [green]|||||    [/]\n"
            "MEM: [yellow]||||||||  [/]\n"
            "NET: [green]UP[/]   DISK: [cyan]||||[/]"
        )
        self.add_class("holo-card")

class ActivityLog(Static):
    def on_mount(self) -> None:
        self.update(
            "[dim]ACTIVITY LOG[/dim]\n"
            "• Router: TUI mode engaged\n"
            "• Plugins: 3 enabled / 2 disabled\n"
            "• Tip: Press [b]F2[/b] to open Plugin Bay"
        )
        self.add_class("holo-card")

class PluginBay(Container):
    def compose(self) -> ComposeResult:
        items = []
        for p in PLUGINS:
            dot = "●" if p["on"] else "○"
            color = "green" if p["on"] else "red"
            line = f"[b {color}]{dot}[/] [cyan]{p['name']}[/] [dim]v{p['ver']}[/] — {p['desc']}"
            items.append(ListItem(Static(line)))
        list_view = ListView(*items, id="plugin-list")
        info = Static("", id="plugin-info", classes="holo-card")
        yield Horizontal(list_view, info)

    def on_mount(self) -> None:
        self.query_one("#plugin-info", Static).update(
            "[b]Plugin Bay[/b]\n[dim]Select a plugin for details[/]"
        )

class Starship(App):
    BINDINGS = [
        ("f1", "bell", "Menu"),
        ("f2", "show_plugins", "Plugins"),
        ("f3", "notify_system", "System"),
        ("f4", "notify_files", "Files"),
        ("g", "layout_grid", "Grid"),
        ("c", "layout_cockpit", "Cockpit"),
        ("q", "quit", "Quit"),
    ]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Banner()
        self.body = Container()
        yield self.body
        yield Footer()
        self._render_cockpit()

    # Layouts
    def _render_cockpit(self) -> None:
        self.body.remove_children()
        self.body.mount(
            Horizontal(
                Vertical(StatusPanel(), classes="side"),
                ActivityLog(),
                Vertical(StatusPanel(), classes="side"),
                classes="cockpit",
            )
        )

    def _render_grid(self) -> None:
        self.body.remove_children()
        self.body.mount(
            Grid(
                Static("Plugins", classes="holo-card center"),
                Static("System Monitor", classes="holo-card center"),
                Static("File Browser", classes="holo-card center"),
                Static("Context", classes="holo-card center"),
                classes="grid",
            )
        )

    # Actions
    def action_layout_grid(self) -> None:
        self._render_grid()

    def action_layout_cockpit(self) -> None:
        self._render_cockpit()

    def action_show_plugins(self) -> None:
        self.body.remove_children()
        self.body.mount(PluginBay())

    def action_notify_system(self) -> None:
        self.notify("System panel TBD", timeout=2)

    def action_notify_files(self) -> None:
        self.notify("File browser TBD", timeout=2)

if __name__ == "__main__":
    Starship().run()
