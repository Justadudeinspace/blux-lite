# blux/tui_starship.py
from __future__ import annotations
from dataclasses import dataclass

from textual.app import App, ComposeResult
from textual.widgets import Footer, Static, Log, DataTable
from textual.containers import Container
from textual.binding import Binding
from rich.text import Text
from rich.panel import Panel
from rich.align import Align

@dataclass
class Plugin:
    name: str
    version: str
    description: str
    enabled: bool
    update_available: bool = False

class BluxHeader(Static):
    """A futuristic header for the BLUX Lite TUI."""

    def render(self) -> Panel:
        """Render the header."""
        title = Text("BLUX Lite GOLD", style="bold #00FFFF", justify="center")
        subtitle = Text("v1.0.0 - 'Orion'", style="italic #FF00FF", justify="center")
        
        text = Text.assemble(title, "\n", subtitle)

        return Panel(
            Align.center(text, vertical="middle"),
            border_style="bold #00FFFF",
            style="#0A0C10",
            height=5,
        )

class PluginBay(Static):
    """A widget to display the list of plugins."""

    def compose(self) -> ComposeResult:
        yield DataTable(id="plugin_table")

    def on_mount(self) -> None:
        table = self.query_one(DataTable)
        table.add_columns("Status", "Plugin", "Version", "Description")
        
        plugins = self.get_plugins()
        
        for plugin in plugins:
            status = "[green]●[/green]" if plugin.enabled else "[red]○[/red]"
            if plugin.update_available:
                status += " [yellow]![/yellow]"
            
            table.add_row(status, plugin.name, plugin.version, plugin.description)

    def get_plugins(self) -> list[Plugin]:
        return [
            Plugin(name="Genkit", version="0.5.1", description="AI Framework Integration", enabled=True),
            Plugin(name="Code Quality", version="1.2.0", description="Linting and Formatting", enabled=True),
            Plugin(name="Heimdall Tools", version="0.8.3", description="Android Device Management", enabled=False),
            Plugin(name="Payload Tools", version="0.9.0", description="Payload Extraction and Packing", enabled=True, update_available=True),
            Plugin(name="APK Retool", version="1.0.5", description="APK Decompilation & Analysis", enabled=False),
            Plugin(name="GGUF Tools", version="0.2.0", description="GGUF Model Management", enabled=True),
            Plugin(name="Lora Manager", version="0.1.0", description="LoRA Model Management", enabled=False),
        ]

class BluxStarshipTUI(App):
    """A Textual-based TUI for BLUX Lite GOLD."""

    CSS_PATH = "tui_starship.tcss"

    BINDINGS = [
        Binding("q", "quit", "Quit", priority=True),
        Binding("d", "toggle_dark", "Toggle dark mode"),
        Binding("f1", "menu", "Menu"),
        Binding("f2", "scripts", "Scripts"),
        Binding("f3", "plugins", "Plugins"),
        Binding("f4", "docs", "Docs"),
        Binding("f5", "env", "Env"),
        Binding("f6", "cloud", "Cloud"),
        Binding("f9", "doctor", "Doctor"),
        Binding("f10", "exit", "Exit"),
    ]

    def compose(self) -> ComposeResult:
        """Create child widgets for the app."""
        yield BluxHeader(id="blg_header")
        yield Container(
            Container(
                Static("Plugin Bay", id="feature_title"),
                PluginBay(id="plugin_bay"),
                id="left_pane"
            ),
            Container(
                Static("Activity Log", id="log_title"),
                Log(id="log_view"),
                id="right_pane"
            ),
            id="focus_area"
        ),
        Container(
            Static("[F1] Menu", classes="fkey"),
            Static("[F2] Scripts", classes="fkey"),
            Static("[F3] Plugins", classes="fkey"),
            Static("[F4] Docs", classes="fkey"),
            id="fkeys_row1"
        ),
        Container(
            Static("[F5] Env", classes="fkey"),
            Static("[F6] Cloud", classes="fkey"),
            Static("[F9] Doctor", classes="fkey"),
            Static("[F10] Exit", classes="fkey"),
            id="fkeys_row2"
        ),
        Static("Status: [green]ONLINE[/green] [b]>[/b]", classes="blinking", id="status_line"),
        yield Footer()

    def on_mount(self) -> None:
        """Called when the app is mounted."""
        log = self.query_one(Log)
        log.write_line("BLUX Lite GOLD TUI started.")
        log.write_line("Welcome to the future!")
        log.write_line("Plugin Bay loaded.")

    def action_menu(self) -> None:
        self.query_one(Log).write_line("Menu action triggered!")
    def action_scripts(self) -> None:
        self.query_one(Log).write_line("Scripts action triggered!")
    def action_plugins(self) -> None:
        self.query_one(Log).write_line("Plugins action triggered!")
    def action_docs(self) -> None:
        self.query_one(Log).write_line("Docs action triggered!")
    def action_env(self) -> None:
        self.query_one(Log).write_line("Env action triggered!")
    def action_cloud(self) -> None:
        self.query_one(Log).write_line("Cloud action triggered!")
    def action_doctor(self) -> None:
        self.query_one(Log).write_line("Doctor action triggered!")
    def action_exit(self) -> None:
        self.app.exit()


def main() -> None:
    """Run the TUI app."""
    app = BluxStarshipTUI()
    app.run()

if __name__ == "__main__":
    main()