#!/usr/bin/env bash
[ "${BLG_DEBUG:-0}" = "1" ] && set -x
set -euo pipefail
IFS=$'\n\t'

echo "[BLUX Lite] Runner Dry Run (non-destructive)"
ROOT="$(cd -- "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd -P)"
cd "$ROOT"

echo "1) Checking bootstrap presence..."
test -f "first_start.sh" && echo "   - first_start.sh: OK" || { echo "   - first_start.sh: MISSING"; exit 1; }

echo "2) Verifying auto-start.sh is not pre-bundled..."
if [[ -f "auto-start.sh" ]]; then
  echo "   - auto-start.sh exists (should be generated by first_start.sh)."; # exit 2;
else
  echo "   - auto-start.sh: not present (OK)"
fi

echo "3) Checking menu runner..."
test -f "blux-lite.sh" && echo "   - blux-lite.sh: OK" || { echo "   - blux-lite.sh: MISSING"; exit 3; }

echo "4) Documentation sanity..."
grep -qi "first_start.sh" "README.md" && echo "   - README mentions first_start.sh: OK" || { echo "   - README missing startup docs"; exit 4; }

echo "5) Version check..."
if [ -x "$ROOT/.venv/bin/python" ]; then
    PYBIN="$ROOT/.venv/bin/python"
elif command -v python3 >/dev/null 2>&1; then
    PYBIN="$(command -v python3)"
elif command -v python >/dev/null 2>&1; then
    PYBIN="$(command -v python)"
else
    PYBIN=""
fi

"$PYBIN" - <<'PY'
try:
    from blux import __version__
    print(f"   - blux.__version__ = {__version__}")
except Exception as e:
    print("   - Could not import blux.__version__:", e)
PY

echo "Dry run complete. No actions executed."
